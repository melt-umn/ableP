grammar edu:umn:cs:melt:ableP:abstractsyntax;

import edu:umn:cs:melt:ableP:terminals;

nonterminal Program with pp, errors, host<Program> ;

--synthesized attribute inlined_Program :: Program occurs on Program;

abstract production program
p::Program ::= u::Units
{ p.pp = "// Promela code generated by ableP.\n\n" ++ u.pp ++ "//end\n" ;
  u.ppi = "" ;
  p.errors := u.errors;
  p.host = program(u.host);
-- p.inlined_Program = program(u.inlined_Units);
-- u.env = emptyDefs();
-- p.defs = u.defs;
}


-- Units --
-----------
nonterminal Units with pp, ppi, errors, host<Units> ;

abstract production units_one
us::Units ::= u::Unit
{ us.pp = u.pp; 
  u.ppi = "";
  us.host = units_one(u.host);
--  us.basepp = u.basepp;
--  us.errors = u.errors;
--  us.defs = u.defs;
--  u.env = us.defs;
--  us.inlined_Units = units_one(u.inlined_Unit);
}

abstract production units_snoc
us::Units ::= us2::Units u::Unit
{ us.pp = us2.pp ++ u.pp;
  u.ppi = "";
  us.host = units_snoc(us2.host, u.host);
--  us.basepp = us2.basepp ++ u.basepp;
--  us.errors = us2.errors ++ u.errors;
--  us.defs = mergeDefs(us2.defs,u.defs);  
--  us2.env = us.env ;
--  u.env = mergeDefs(us2.defs,us.env);
--  us.inlined_Units = units_snoc(us2.inlined_Units, u.inlined_Unit);
}



{- Not sure that we need this anymore.  It is not used anywhere but in
its own definition of inlined_Program.
 
abstract production empty_program
p::Program ::=
{
 p.basepp = "";
 p.pp = "";
 p.inlined_Program = empty_program();
 p.errors = [];
 p.defs = emptyDefs();
} 
   
-}
